import yaml
import os
import wandb

###### SCRIPT PARAMETERS
WANDB_PROJECT="Autoformer-javierdev"
NAMESPACE="alelab"
YAML_DEBUG_LOCATION="../generated_sweeps/"
if not os.path.exists(YAML_DEBUG_LOCATION):
    os.makedirs(YAML_DEBUG_LOCATION)

SWEEP_NAME_PREFIX="Finaljan_Constrained"
EXPERIMENT_TAG="e15_finaljan_allconstrained"
EXPERIMENT_DESCRIPTION='Finaljan batch of constrained runs'#extra description add here.

#MODELS = ["Autoformer","Reformer"]
MODELS = ["Autoformer","Reformer","Informer","Transformer"]
#PRED_LENGTHS = [96] # If constrained must run one at a time
PRED_LENGTHS = [96,192,336,720]
NUM_SEEDS=3
if len(MODELS)>1:
    MODEL_DICT = {"values": MODELS}
else:
    MODEL_DICT = {"value": MODELS[0]}

#TODO generate one for each dataset (electricity, weather )
DATASET_DEPENDENT={
  "weather.csv":{
    'root_path': {'value': './dataset/weather/'},
    'data_path': {'value': 'weather.csv'},
    'model_id': {'value': 'weather_constrained'},#TODO parameterize
    'enc_in': {'value': 21},
    'dec_in': {'value': 21},
    'c_out': {'value': 21},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "electricity.csv":{
    'root_path': {'value': './dataset/electricity/'},
    'data_path': {'value': 'electricity.csv'},
    'model_id': {'value': 'electricity_constrained'},
    'enc_in': {'value': 321},
    'dec_in': {'value': 321},
    'c_out': {'value': 321},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "exchange_rate.csv":{
    'root_path': {'value': './dataset/exchange_rate/'},
    'data_path': {'value': 'exchange_rate.csv'},
    'model_id': {'value': 'exchange_constrained'},
    'enc_in': {'value': 8},
    'dec_in': {'value': 8},
    'c_out': {'value': 8},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  }
}

# Structure for the constant constraint levels. Generated by a notebook
CONSTRAINT_DATA={'electricity.csv': {'Autoformer': {96: [0.122, 0.128, 0.134],
   192: [0.165, 0.169, 0.177],
   336: [0.171, 0.182, 0.188],
   720: [0.197, 0.203, 0.219]},
  'Informer': {96: [0.172, 0.176, 0.184],
   192: [0.19, 0.194, 0.197],
   336: [0.224, 0.232, 0.242],
   720: [0.368, 0.378, 0.396]},
  'Reformer': {96: [0.173, 0.175, 0.176],
   192: [0.185, 0.185, 0.185],
   336: [0.195, 0.196, 0.197],
   720: [0.209, 0.209, 0.211]},
  'Transformer': {96: [0.124, 0.125, 0.128],
   192: [0.129, 0.132, 0.137],
   336: [0.135, 0.136, 0.14],
   720: [0.153, 0.154, 0.157]}},
 'exchange_rate.csv': {'Autoformer': {96: [0.118, 0.167, 0.219],
   192: [0.212, 0.279, 0.364],
   336: [0.281, 0.416, 0.596],
   720: [0.423, 0.749, 0.927]},
  'Informer': {96: [0.054, 0.055, 0.06],
   192: [0.055, 0.058, 0.063],
   336: [0.059, 0.062, 0.066],
   720: [0.067, 0.071, 0.078]},
  'Reformer': {96: [0.096, 0.137, 0.176],
   192: [0.169, 0.252, 0.334],
   336: [0.223, 0.348, 0.477],
   720: [0.376, 0.605, 0.724]},
  'Transformer': {96: [0.039, 0.04, 0.043],
   192: [0.044, 0.046, 0.05],
   336: [0.052, 0.056, 0.062],
   720: [0.066, 0.068, 0.071]}},
 'weather.csv': {'Autoformer': {96: [0.378, 0.396, 0.432],
   192: [0.461, 0.531, 0.561],
   336: [0.422, 0.685, 0.721],
   720: [0.687, 0.747, 0.775]},
  'Informer': {96: [0.238, 0.244, 0.249],
   192: [0.251, 0.257, 0.266],
   336: [0.262, 0.269, 0.278],
   720: [0.283, 0.288, 0.301]},
  'Reformer': {96: [0.313, 0.341, 0.359],
   192: [0.349, 0.372, 0.395],
   336: [0.367, 0.385, 0.395],
   720: [0.362, 0.366, 0.369]},
  'Transformer': {96: [0.182, 0.185, 0.189],
   192: [0.2, 0.204, 0.208],
   336: [0.217, 0.219, 0.221],
   720: [0.241, 0.242, 0.243]}}}


CONSTRAINT_PARAMS={
  'constraint_level': {'values': []},
  'constraint_type': {'value': 'constant'},
  'dual_init': {'value': 1.0},
  'dual_lr': {'value': 0.01},
}

SWEEP_HEADER={
  "program": "run.py",
  "method": "grid",
  "project": WANDB_PROJECT,
  "entity": NAMESPACE,
  "metric": {
    "name": "mse/test",
    "goal": "minimize"
  },
}

DOCUMENTATION_PARAMS = {
  'wandb_run': {'value': ''}, 
  'wandb_project': {'value': WANDB_PROJECT},
  'experiment_tag': {'value': EXPERIMENT_TAG},
  'des': {'value': EXPERIMENT_DESCRIPTION}, 
}

TEMPLATE={
    **SWEEP_HEADER,
    "parameters": {
        **DOCUMENTATION_PARAMS,
        #**DATASET_DEPENDENT, #will be added later
        "model":MODEL_DICT,
        'pred_len': {'value': 0},#TODO PARAMETERIZE
        **CONSTRAINT_PARAMS,
        #Other params that don't change much
        'train_epochs': {'value': 10},
        'is_training': {'value': '1'},
        #TODO PARAMETERIZE DATASET_DEPENDENT
        'seq_len': {'value': 96}, #TODO confirm, does this change with pred len? I don't think so.
        'label_len': {'value': 48},
        'e_layers': {'value': 2},
        'd_layers': {'value': 1},
        'factor': {'value': 3},
        'itr': {'value': 1},
        'seed': {'value': 0}#Sets the seed to a random one. The seed will be stored.
    }
}

# Generating epsilon constraint sweeps
# By definition, must run one at a time because the gridsearch is along constraint levels.
print("Starting sweep generation")
sweep_commands = []
for num_seed in range(1,NUM_SEEDS+1):
  for data_path in ["weather.csv","electricity.csv","exchange_rate.csv"]:
    for model in MODELS:
        for pred_len in PRED_LENGTHS:
              sweep_config = TEMPLATE.copy()
              sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path}_{model}_{pred_len}_seed{num_seed}"
              sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} Constrained epsilon run {data_path} {model} {pred_len} seed{num_seed}."}
              sweep_config['parameters']['wandb_run'] = {'value': f"{data_path}/Constrained/{model}/{pred_len}-10e"}
              sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
              sweep_config["parameters"]["model"] = {"value": model}
              sweep_config["parameters"]["pred_len"] = {"value": pred_len}
              #data_path replace .csv with ''
              sweep_config["parameters"]["model_id"] = {"value": f"{model}_{data_path.replace('.csv','')}_{pred_len}_constant"}

              # Add the constraint levels
              sweep_config["parameters"].update(CONSTRAINT_PARAMS)
              sweep_config["parameters"]["constraint_level"] = {"values": CONSTRAINT_DATA[data_path][model][pred_len]}
              # Update description, including params & seed number
              #print(sweep_config)
              sweep_id = wandb.sweep(sweep_config)
              sweep_commands.append(f"wandb agent {NAMESPACE}/{WANDB_PROJECT}/{sweep_id}")
              # Write YAML file for debugging, with overwrite
              YAML_FILENAME=f"sweep_{data_path}_{model}_{pred_len}_seed{num_seed}.yaml"
              #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
              with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
                  yaml.dump(sweep_config,f,sort_keys=False)
sweep_commands
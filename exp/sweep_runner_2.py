"""
Script to run sweeps 2.0. Before, we used YAMLs. Now we use the wandb API on python.
"""
import yaml
import os
import wandb

###### SCRIPT PARAMETERS
WANDB_PROJECT="Autoformer"
#WANDB_PROJECT="Autoformer"
NAMESPACE="alelab"
YAML_DEBUG_LOCATION="../generated_sweeps/"
if not os.path.exists(YAML_DEBUG_LOCATION):
    os.makedirs(YAML_DEBUG_LOCATION)

#SWEEP_NAME_PREFIX="Finaljan_ERM_replicated_noearlystop"
SWEEP_NAME_PREFIX="Finaljan_ConstConstr_loose"
#EXPERIMENT_TAG="e17_finaljan_constant_constrained_replicated"
EXPERIMENT_TAG="e18_icml_constant_constrained_loose"
EXPERIMENT_DESCRIPTION='Constrained loose'

#MODELS = ["Autoformer","Reformer"]
#TODO dev, comment out.
# MODELS = ["Autoformer","Reformer"]
# DATASETS=["weather.csv"]
# PRED_LENGTHS=[96]
#PROD PARAMETERS
MODELS = ["Autoformer","Reformer","Informer","Transformer"]
DATASETS=["weather.csv","electricity.csv","exchange_rate.csv"]
PRED_LENGTHS = [96,192,336,720]
NUM_SEEDS=1 
#SEED=0 # IF 0 THEN RANDOM SEED
SEED=2021 # The seed used by the literature
#SEED=6163 # Seed 2.
###################
###################
print(f"Creating sweeps in project {WANDB_PROJECT}, namespace {NAMESPACE}")

# Only used by ERM, will be overwritten in constrained
if len(MODELS)>1:
    MODEL_DICT = {"values": MODELS}
else:
    MODEL_DICT = {"value": MODELS[0]}

DATASET_DEPENDENT={
  "weather.csv":{
    'root_path': {'value': './dataset/weather/'},
    'data_path': {'value': 'weather.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 21},
    'dec_in': {'value': 21},
    'c_out': {'value': 21},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "electricity.csv":{
    'root_path': {'value': './dataset/electricity/'},
    'data_path': {'value': 'electricity.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 321},
    'dec_in': {'value': 321},
    'c_out': {'value': 321},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "exchange_rate.csv":{
    'root_path': {'value': './dataset/exchange_rate/'},
    'data_path': {'value': 'exchange_rate.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 8},
    'dec_in': {'value': 8},
    'c_out': {'value': 8},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  }
}

# Structure for the constant constraint levels. Generated by a notebook
CONSTRAINT_DATA={'electricity.csv': {'Autoformer': {96: [0.151, 0.16, 0.166],
   192: [0.174, 0.184, 0.202],
   336: [0.197, 0.207, 0.24],
   720: [0.218, 0.228, 0.244]},
  'Informer': {96: [0.224, 0.226, 0.232],
   192: [0.226, 0.237, 0.257],
   336: [0.25, 0.263, 0.296],
   720: [0.309, 0.321, 0.352]},
  'Reformer': {96: [0.198, 0.202, 0.207],
   192: [0.218, 0.238, 0.254],
   336: [0.223, 0.236, 0.254],
   720: [0.251, 0.254, 0.255]},
  'Transformer': {96: [0.176, 0.181, 0.189],
   192: [0.197, 0.211, 0.227],
   336: [0.194, 0.211, 0.234],
   720: [0.232, 0.239, 0.25]}},
 'exchange_rate.csv': {'Autoformer': {96: [0.138, 0.217, 0.269],
   192: [0.375, 0.742, 1.714],
   336: [0.763, 0.83, 1.126],
   720: [0.582, 1.047, 1.4]},
  'Informer': {96: [0.759, 0.8, 1.017],
   192: [0.826, 1.103, 1.332],
   336: [1.987, 2.337, 3.09],
   720: [3.706, 4.829, 6.314]},
  'Reformer': {96: [1.137, 1.221, 1.495],
   192: [1.915, 2.067, 2.187],
   336: [3.682, 4.134, 4.544],
   720: [3.071, 4.638, 5.988]},
  'Transformer': {96: [0.423, 0.562, 0.67],
   192: [0.431, 0.798, 0.87],
   336: [1.019, 1.183, 1.294],
   720: [1.234, 2.496, 3.198]}},
 'weather.csv': {'Autoformer': {96: [0.484, 0.541, 0.549],
   192: [0.559, 0.58, 0.689],
   336: [0.61, 0.679, 0.737],
   720: [0.702, 0.862, 0.92]},
  'Informer': {96: [0.475, 0.527, 0.548],
   192: [0.525, 0.563, 0.607],
   336: [0.577, 0.671, 0.729],
   720: [0.747, 0.849, 0.98]},
  'Reformer': {96: [0.461, 0.527, 0.565],
   192: [0.598, 0.627, 0.667],
   336: [0.73, 0.804, 0.835],
   720: [0.877, 0.892, 0.905]},
  'Transformer': {96: [0.467, 0.538, 0.585],
   192: [0.559, 0.662, 0.771],
   336: [0.622, 0.772, 0.869],
   720: [0.787, 0.972, 1.035]}}}


CONSTRAINT_PARAMS={
  'constraint_level': {'values': []},#will fail if not set later.
  'constraint_type': {'value': 'constant'},
  'dual_init': {'value': 1.0},
  'dual_lr': {'value': 0.01},
}

SWEEP_HEADER={
  "program": "run.py",
  "method": "grid",
  "project": WANDB_PROJECT,
  "entity": NAMESPACE,
  "metric": {
    "name": "mse/test",
    "goal": "minimize"
  },
}

DOCUMENTATION_PARAMS = {
  'wandb_run': {'value': ''}, 
  'wandb_project': {'value': WANDB_PROJECT},
  'experiment_tag': {'value': EXPERIMENT_TAG},
  'des': {'value': EXPERIMENT_DESCRIPTION}, 
}

TEMPLATE={
    **SWEEP_HEADER,
    "parameters": {
        **DOCUMENTATION_PARAMS,
        #**DATASET_DEPENDENT, #will be added later
        "model":MODEL_DICT,
        'pred_len': {'value': 0}, #also should fail if not set earlier
        **CONSTRAINT_PARAMS,
        #Other params that don't change much
        'train_epochs': {'value': 10},
        'is_training': {'value': '1'},
        'seq_len': {'value': 96}, 
        'label_len': {'value': 48},
        'e_layers': {'value': 2},
        'd_layers': {'value': 1},
        'factor': {'value': 3},
        'itr': {'value': 1},
        'seed': {'value': SEED}
    }
}

# Generating epsilon constraint sweeps
# By definition, must run one at a time because the gridsearch is along constraint levels.
# CONSRTTRAINED
print("Starting sweep generation")
sweep_commands = []
for num_seed in range(1,NUM_SEEDS+1):
  for data_path in DATASETS:
    for model in MODELS:
        for pred_len in PRED_LENGTHS:
              sweep_config = TEMPLATE.copy()
              #data_path replace .csv with '', for names.
              data_path_nodot=data_path.replace('.csv','')

              sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path_nodot}_{model}_{pred_len}_seed{num_seed}"
              sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} {data_path} {model} {pred_len} seed{num_seed}."}
              sweep_config['parameters']['wandb_run'] = {'value': f"{data_path_nodot}/Constrained/{model}/{pred_len}-10e"}
              sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
              sweep_config["parameters"]["model"] = {"value": model}
              sweep_config["parameters"]["pred_len"] = {"value": pred_len}
              
              constraint_type_name = CONSTRAINT_PARAMS['constraint_type']['value']
              sweep_config["parameters"]["model_id"] = {"value": f"{model}_{data_path_nodot}_{pred_len}_{constraint_type_name}"}

              # Add the constraint levels
              sweep_config["parameters"].update(CONSTRAINT_PARAMS)
              sweep_config["parameters"]["constraint_level"] = {"values": CONSTRAINT_DATA[data_path][model][pred_len]}
              # Update description, including params & seed number
              #print(sweep_config)
              sweep_id = wandb.sweep(sweep_config)
              sweep_commands.append(f"wandb agent {NAMESPACE}/{WANDB_PROJECT}/{sweep_id}")
              # Write YAML file for debugging, with overwrite
              YAML_FILENAME=f"sweep_{data_path_nodot}_{model}_{pred_len}_seed{num_seed}.yaml"
              #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
              with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
                  yaml.dump(sweep_config,f,sort_keys=False)
print("Run the following commands: \n\n")
#print(sweep_commands)
from functools import reduce
result = reduce(lambda x, y: f"{x} && {y}", sweep_commands)
print(result)
print ("\n Done")

#########



###########################
###########################
###########################
###FOR ERM
#TODO maybe split into separate files or funcs. 
# Generating ERM sweeps
# print("Starting sweep generation")
# print("ERM Sweeps, setting constraints to zero")
# CONSTRAINT_PARAMS={
#   'constraint_level': {'value': -1.0},
#   'constraint_type': {'value': 'erm'},
#   'dual_init': {'value': 0.0},
#   'dual_lr': {'value': 0.0},
# }

# sweep_commands = []
# for num_seed in range(1,NUM_SEEDS+1):
#   for data_path in DATASETS:
#     sweep_config = TEMPLATE.copy()
#     sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path}_seed{SEED}"
#     sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} ERM epsilon run {data_path} seed{SEED}."}
#     sweep_config['parameters']['wandb_run'] = {'value': f"AllModels_{data_path}/ERM"}
#     sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
#     sweep_config["parameters"]["model"] = {"values": MODELS}
#     sweep_config["parameters"]["pred_len"] = {"values": PRED_LENGTHS}
#     #data_path replace .csv with ''
#     sweep_config["parameters"]["model_id"] = {"value": f"{data_path.replace('.csv','')}_erm"}

#     # Add the placeholder constraint levels
#     sweep_config["parameters"].update(CONSTRAINT_PARAMS)
#     # drop constraint_levels
#     #sweep_config["parameters"].pop("constraint_level")
#     # Update description, including params & seed number
#     #print(sweep_config)
    
#     sweep_id = wandb.sweep(sweep_config)
#     sweep_commands.append(f"wandb agent {NAMESPACE}/{WANDB_PROJECT}/{sweep_id}")
#     # Write YAML file for debugging, with overwrite
#     YAML_FILENAME=f"sweep_erm_{data_path}_all_models_seed{SEED}.yaml"
#     #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
#     with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
#         yaml.dump(sweep_config,f,sort_keys=False)
# from functools import reduce
# result = reduce(lambda x, y: f"{x} && {y}", sweep_commands)
# print(result)
# print ("\n Done")

###########################
###########################
###########################
###########################
"""
Script to run sweeps 2.0. Before, we used YAMLs. Now we use the wandb API on python.
"""
import yaml
import os
import wandb

###### SCRIPT PARAMETERS

WANDB_PROJECT="Autoformer"
# WANDB_PROJECT="Autoformer-javierdev"
NAMESPACE="alelab"
YAML_DEBUG_LOCATION="../generated_sweeps/"
if not os.path.exists(YAML_DEBUG_LOCATION):
    os.makedirs(YAML_DEBUG_LOCATION)

SWEEP_NAME_PREFIX="Finaljan_Constrained_Koopa"
EXPERIMENT_TAG="e24_icml_koopa_constrained_val"
EXPERIMENT_DESCRIPTION='Constrained Koopa'

# Constraint parameters
# Constant
#CONSTRAINT_TYPE='resilience'
CONSTRAINT_TYPE='constant'
#CONSTRAINT_TYPE='monotonic'
#CONSTRAINT_TYPE='static_linear'

DUAL_LR=0.01
DUAL_INIT=1.0

# CONSTRAINT_TYPE='erm'
# DUAL_LR=0.0
# DUAL_INIT=0.0


# Required if Resilience
RESILIENT_LR=0.1
# Use if monotonic_no_resilience
#RESILIENT_LR=0.0

#PROD PARAMETERS
#MODELS = ["Autoformer","Reformer","Informer","Transformer"]
#MODELS = ["PatchTST"] #Must run by itself
MODELS = ["Koopa"]
if len(MODELS)>1 and "PatchTST" in MODELS:
    raise ValueError("PatchtTST Must be run separately because of its unique parameters")
DATASETS=["weather.csv","electricity.csv","exchange_rate.csv"]
PRED_LENGTHS = [96,192,336,720]
NUM_SEEDS=1
#SEED=0 # IF 0 THEN RANDOM SEED
SEED=2021 # The seed used by the literature
#SEED=6163 # Seed 2.

#END PARAMETERS
###################
###################
print(f"Creating sweeps in project {WANDB_PROJECT}, namespace {NAMESPACE}")

# Only used by ERM, will be overwritten in constrained
if len(MODELS)>1:
    MODEL_DICT = {"values": MODELS}
else:
    MODEL_DICT = {"value": MODELS[0]}

DATASET_DEPENDENT={
  "weather.csv":{
    'root_path': {'value': './dataset/weather/'},
    'data_path': {'value': 'weather.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 21},
    'dec_in': {'value': 21},
    'c_out': {'value': 21},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "electricity.csv":{
    'root_path': {'value': './dataset/electricity/'},
    'data_path': {'value': 'electricity.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 321},
    'dec_in': {'value': 321},
    'c_out': {'value': 321},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "exchange_rate.csv":{
    'root_path': {'value': './dataset/exchange_rate/'},
    'data_path': {'value': 'exchange_rate.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 8},
    'dec_in': {'value': 8},
    'c_out': {'value': 8},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  }
}

# Structure for the constant constraint levels. Generated by a notebook
# CONSTRAINT_LINES = {
#     "exchange_rate.csv": {
#         "Transformer": {
#             96: {
#                 "constraint_slope": 0.0048721632772144,
#                 "constraint_offset": 0.3485848905256216,
#             },
#             192: {
#                 "constraint_slope": 0.004052669820392038,
#                 "constraint_offset": 0.3104082279660076,
#             },
#             336: {
#                 "constraint_slope": 0.0004373680825867109,
#                 "constraint_offset": 1.065416613917693,
#             },
#             720: {
#                 "constraint_slope": 0.0060212468950883394,
#                 "constraint_offset": 0.3024330213060873,
#             },
#         },
#         "Informer": {
#             96: {
#                 "constraint_slope": 0.007684555774877013,
#                 "constraint_offset": 0.5321727667797573,
#             },
#             192: {
#                 "constraint_slope": 0.005181187085308707,
#                 "constraint_offset": 0.5723228000493683,
#             },
#             336: {
#                 "constraint_slope": 0.0014479390402535252,
#                 "constraint_offset": 2.086622595441734,
#             },
#             720: {
#                 "constraint_slope": 0.007817946384975672,
#                 "constraint_offset": 1.7904814601478427,
#             },
#         },
#         "Reformer": {
#             96: {
#                 "constraint_slope": 0.007653235095920477,
#                 "constraint_offset": 0.9281595112992725,
#             },
#             192: {
#                 "constraint_slope": 0.002579410895460663,
#                 "constraint_offset": 1.8082184842586622,
#             },
#             336: {
#                 "constraint_slope": 0.0036450122732956673,
#                 "constraint_offset": 3.503273776371936,
#             },
#             720: {
#                 "constraint_slope": 0.005804240908408011,
#                 "constraint_offset": 2.504404234184399,
#             },
#         },
#         "Autoformer": {
#             96: {
#                 "constraint_slope": 0.003187017521062463,
#                 "constraint_offset": 0.07321372988899444,
#             },
#             192: {
#                 "constraint_slope": 0.0046678450450284405,
#                 "constraint_offset": 0.5407809990841013,
#             },
#             336: {
#                 "constraint_slope": 0.004302151925672287,
#                 "constraint_offset": 0.7608681686903707,
#             },
#             720: {
#                 "constraint_slope": 0.001255407281599334,
#                 "constraint_offset": 0.7643677287414274,
#             },
#         },
#     },
#     "electricity.csv": {
#         "Transformer": {
#             96: {
#                 "constraint_slope": 0.00018058856792557975,
#                 "constraint_offset": 0.17532268135177925,
#             },
#             192: {
#                 "constraint_slope": 0.0002745732218285824,
#                 "constraint_offset": 0.18203921958929592,
#             },
#             336: {
#                 "constraint_slope": 0.00021424353184040012,
#                 "constraint_offset": 0.18045904804392227,
#             },
#             720: {
#                 "constraint_slope": 7.320487344891122e-05,
#                 "constraint_offset": 0.2222488119198754,
#             },
#         },
#         "Informer": {
#             96: {
#                 "constraint_slope": 5.059773147882361e-05,
#                 "constraint_offset": 0.22445071323477114,
#             },
#             192: {
#                 "constraint_slope": 0.00026849531307226337,
#                 "constraint_offset": 0.21512977261376118,
#             },
#             336: {
#                 "constraint_slope": 0.00023329113666509227,
#                 "constraint_offset": 0.23017813708784257,
#             },
#             720: {
#                 "constraint_slope": 4.0616442826614975e-05,
#                 "constraint_offset": 0.31497664474861375,
#             },
#         },
#         "Reformer": {
#             96: {
#                 "constraint_slope": 0.0001971797001908411,
#                 "constraint_offset": 0.19353902682700416,
#             },
#             192: {
#                 "constraint_slope": 0.00031206220865606996,
#                 "constraint_offset": 0.20802836842587236,
#             },
#             336: {
#                 "constraint_slope": 0.0001610136315513448,
#                 "constraint_offset": 0.2124771789230603,
#             },
#             720: {
#                 "constraint_slope": 1.1814872122449603e-05,
#                 "constraint_offset": 0.2485573315329587,
#             },
#         },
#         "Autoformer": {
#             96: {
#                 "constraint_slope": 0.00036984267328753147,
#                 "constraint_offset": 0.14385730388519896,
#             },
#             192: {
#                 "constraint_slope": 0.0002219332434885593,
#                 "constraint_offset": 0.15491316168744354,
#             },
#             336: {
#                 "constraint_slope": 0.00016559320880191365,
#                 "constraint_offset": 0.18021680599125123,
#             },
#             720: {
#                 "constraint_slope": 9.513495419335503e-05,
#                 "constraint_offset": 0.1824188969577543,
#             },
#         },
#     },
#     "weather.csv": {
#         "Transformer": {
#             96: {
#                 "constraint_slope": 0.002965666453959951,
#                 "constraint_offset": 0.374861371597832,
#             },
#             192: {
#                 "constraint_slope": 0.0025788425368543397,
#                 "constraint_offset": 0.40889806080197777,
#             },
#             336: {
#                 "constraint_slope": 0.0016670895645815684,
#                 "constraint_offset": 0.46511043999430957,
#             },
#             720: {
#                 "constraint_slope": 0.0008584281701376895,
#                 "constraint_offset": 0.5788026292186468,
#             },
#         },
#         "Informer": {
#             96: {
#                 "constraint_slope": 0.002373786281230362,
#                 "constraint_offset": 0.38570805417879445,
#             },
#             192: {
#                 "constraint_slope": 0.0012453817331044398,
#                 "constraint_offset": 0.44701555154619277,
#             },
#             336: {
#                 "constraint_slope": 0.001077697329741175,
#                 "constraint_offset": 0.475019037096606,
#             },
#             720: {
#                 "constraint_slope": 0.0006604515889866253,
#                 "constraint_offset": 0.6105470709128389,
#             },
#         },
#         "Reformer": {
#             96: {
#                 "constraint_slope": 0.003032235830326929,
#                 "constraint_offset": 0.34864223703319575,
#             },
#             192: {
#                 "constraint_slope": 0.001284698274636279,
#                 "constraint_offset": 0.4846173206710984,
#             },
#             336: {
#                 "constraint_slope": 0.00084226814850718,
#                 "constraint_offset": 0.6558595674165869,
#             },
#             720: {
#                 "constraint_slope": 0.00010394327607290911,
#                 "constraint_offset": 0.8659767908231745,
#             },
#         },
#         "Autoformer": {
#             96: {
#                 "constraint_slope": 0.0014913866600619018,
#                 "constraint_offset": 0.46215497914868126,
#             },
#             192: {
#                 "constraint_slope": 0.0014313298888678128,
#                 "constraint_offset": 0.4798683133442758,
#             },
#             336: {
#                 "constraint_slope": 0.0009755878436346896,
#                 "constraint_offset": 0.5066744005229913,
#             },
#             720: {
#                 "constraint_slope": 0.0005835010721787275,
#                 "constraint_offset": 0.5976890203027904,
#             },
#         },
#     },
# }

# Koopa train
# CONSTRAINT_DATA={'electricity.csv': {'Koopa': {96: [0.142, 0.16, 0.166],
#    192: [0.172, 0.183, 0.19],
#    336: [0.182, 0.201, 0.232],
#    720: [0.227, 0.264, 0.297]}},
#  'exchange_rate.csv': {'Koopa': {96: [0.054, 0.101, 0.151],
#    192: [0.107, 0.208, 0.307],
#    336: [0.201, 0.35, 0.492],
#    720: [0.319, 0.721, 1.081]}},
#  'weather.csv': {'Koopa': {96: [0.356, 0.418, 0.453],
#    192: [0.422, 0.48, 0.516],
#    336: [0.468, 0.551, 0.604],
#    720: [0.564, 0.645, 0.682]}}
#  }
# Koopa val 
CONSTRAINT_DATA={'electricity.csv': {'Koopa': {96: [0.136, 0.148, 0.151],
   192: [0.154, 0.16, 0.165],
   336: [0.156, 0.172, 0.196],
   720: [0.195, 0.217, 0.234]}},
 'exchange_rate.csv': {'Koopa': {96: [0.082, 0.14, 0.189],
   192: [0.145, 0.256, 0.32],
   336: [0.245, 0.429, 0.557],
   720: [0.735, 1.204, 1.566]}},
 'weather.csv': {'Koopa': {96: [0.36, 0.419, 0.45],
   192: [0.422, 0.488, 0.517],
   336: [0.489, 0.563, 0.63],
   720: [0.569, 0.716, 0.787]}}}
# CONSTRAINT_DATA={
#   "electricity.csv": {
#     "Autoformer": {
#       96: [0.151, 0.166],
#       192: [0.174, 0.202],
#       336: [0.197, 0.24],
#       720: [0.218, 0.244]
#     },
#     "Informer": {
#       96: [0.224, 0.232],
#       192: [0.226, 0.257],
#       336: [0.25, 0.296],
#       720: [0.309, 0.352]
#     },
#     "Reformer": {
#       96: [0.198, 0.207],
#       192: [0.218, 0.254],
#       336: [0.223, 0.254],
#       720: [0.251, 0.255]
#     },
#     "Transformer": {
#       96: [0.176, 0.189],
#       192: [0.197, 0.227],
#       336: [0.194, 0.234],
#       720: [0.232, 0.25]
#     }
#   },
#   "exchange_rate.csv": {
#     "Autoformer": {
#       96: [0.138, 0.269],
#       192: [0.375, 1.714],
#       336: [0.763, 1.126],
#       720: [0.582, 1.4]
#     },
#     "Informer": {
#       96: [0.759, 1.017],
#       192: [0.826, 1.332],
#       336: [1.987, 3.09],
#       720: [3.706, 6.314]
#     },
#     "Reformer": {
#       96: [1.137, 1.495],
#       192: [1.915, 2.187],
#       336: [3.682, 4.544],
#       720: [3.071, 5.988]
#     },
#     "Transformer": {
#       96: [0.423, 0.67],
#       192: [0.431, 0.87],
#       336: [1.019, 1.294],
#       720: [1.234, 3.198]
#     }
#   },
#   "weather.csv": {
#     "Autoformer": {
#       96: [0.484, 0.549],
#       192: [0.559, 0.689],
#       336: [0.61, 0.737],
#       720: [0.702, 0.92]
#     },
#     "Informer": {
#       96: [0.475, 0.548],
#       192: [0.525, 0.607],
#       336: [0.577, 0.729],
#       720: [0.747, 0.98]
#     },
#     "Reformer": {
#       96: [0.461, 0.565],
#       192: [0.598, 0.667],
#       336: [0.73, 0.835],
#       720: [0.877, 0.905]
#     },
#     "Transformer": {
#       96: [0.467, 0.585],
#       192: [0.559, 0.771],
#       336: [0.622, 0.869],
#       720: [0.787, 1.035]
#     }
#   }
# }

CONSTRAINT_PARAMS={
  'constraint_level': {'values': []},#will fail if not set later.
  'constraint_type': {'value': CONSTRAINT_TYPE},
  'dual_init': {'value': DUAL_INIT},
  'dual_lr': {'value': DUAL_LR},
}
if RESILIENT_LR>0:
    CONSTRAINT_PARAMS['resilient_lr']={'value': RESILIENT_LR}
    CONSTRAINT_PARAMS['resilient_cost_alpha']={'value': 2.0}
else:
    CONSTRAINT_PARAMS['resilient_lr']={'value': 0.0}
    CONSTRAINT_PARAMS['resilient_cost_alpha']={'value': 0.0}
    
print("Constraint params (before adding levels): ")
print(CONSTRAINT_PARAMS)

SWEEP_HEADER={
  "program": "run.py",
  "method": "grid",
  "project": WANDB_PROJECT,
  "entity": NAMESPACE,
  "metric": {
    "name": "mse/test",
    "goal": "minimize"
  },
}

DOCUMENTATION_PARAMS = {
  'wandb_run': {'value': ''}, 
  'wandb_project': {'value': WANDB_PROJECT},
  'experiment_tag': {'value': EXPERIMENT_TAG},
  'des': {'value': EXPERIMENT_DESCRIPTION}, 
}

if MODELS == ["PatchTST"]:
    print("Running a PatchTST set of runs")
    PATCH_TST_PARAMS = {
        "fc_dropout": 0.2,
        "e_layers": 3, #Will overwrite the one in the template
        "n_heads": 16,
        "d_model": 128,
        "d_ff": 256,
        "dropout": 0.2,
        "fc_dropout": 0.2,
        "lradj": "TST" 
    }
else: 
    PATCH_TST_PARAMS = {}

if MODELS == ["Koopa"]:
    print("Running a Koopa set of runs")
    KOOPA_PARAMS = {
        "dynamic_dim": {"value": 256},
        "hidden_dim": {"value": 512},
        "hidden_layers": {"value": 3},
        "seg_len": {"value": 48},
        "num_blocks": {"value": 3},
        "alpha": {"value": 0.2},
        "multistep": {"value": 'True'}
    }
else:
    KOOPA_PARAMS = {}

TEMPLATE={
    **SWEEP_HEADER,
    "parameters": {
        **DOCUMENTATION_PARAMS,
        #**DATASET_DEPENDENT, #will be added later
        "model": MODEL_DICT,
        'pred_len': {'value': 0}, #also should fail if not set earlier
        **CONSTRAINT_PARAMS,
        #Other params that don't change much
        'train_epochs': {'value': 10},
        'is_training': {'value': '1'},
        'seq_len': {'value': 96}, 
        'label_len': {'value': 48},
        'e_layers': {'value': 2},
        'd_layers': {'value': 1},
        'factor': {'value': 3},
        'itr': {'value': 1},
        'seed': {'value': SEED},
        **PATCH_TST_PARAMS,
        **KOOPA_PARAMS
    }
}

# Generating epsilon constraint sweeps
# By definition, must run one at a time because the gridsearch is along constraint levels.
# CONSRTTRAINED
print("Starting sweep generation")
sweep_commands = []
for num_seed in range(1,NUM_SEEDS+1):
  for data_path in DATASETS:
    for model in MODELS:
        for pred_len in PRED_LENGTHS:
              sweep_config = TEMPLATE.copy()
              #data_path replace .csv with '', for names.
              data_path_nodot=data_path.replace('.csv','')

              sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path_nodot}_{model}_{pred_len}_seed{num_seed}"
              sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} {data_path} {model} {pred_len} seed{num_seed}."}
              sweep_config['parameters']['wandb_run'] = {'value': f"{data_path_nodot}/Constrained/{model}/{pred_len}-10e"}
              sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
              sweep_config["parameters"]["model"] = {"value": model}
              sweep_config["parameters"]["pred_len"] = {"value": pred_len}
              
              constraint_type_name = CONSTRAINT_PARAMS['constraint_type']['value']
              sweep_config["parameters"]["model_id"] = {"value": f"{model}_{data_path_nodot}_{pred_len}_{constraint_type_name}"}

              # Add the constraint levels
              sweep_config["parameters"].update(CONSTRAINT_PARAMS)
              
              if CONSTRAINT_TYPE=='static_linear':
                #print("Adding static linear constraint levels")
                sweep_config["parameters"]["constraint_slope"] = {"value": CONSTRAINT_LINES[data_path][model][pred_len]['constraint_slope']}
                sweep_config["parameters"]["constraint_offset"] = {"value": CONSTRAINT_LINES[data_path][model][pred_len]['constraint_offset']}
                sweep_config["parameters"].pop("constraint_level")
              #TODO refactor this to support both linear and monotonic. I'm too tired
              if CONSTRAINT_TYPE=='monotonic': # constraint_level-less
                sweep_config["parameters"].pop("constraint_level")
              else:
                if len(CONSTRAINT_DATA[data_path][model][pred_len]) == 1:
                  sweep_config["parameters"]["constraint_level"] = {"value": CONSTRAINT_DATA[data_path][model][pred_len][0]}  
                elif len(CONSTRAINT_DATA[data_path][model][pred_len]) > 1: 
                  sweep_config["parameters"]["constraint_level"] = {"values": CONSTRAINT_DATA[data_path][model][pred_len]}
                else:
                  raise ValueError("No constraint levels found for this model, dataset, and pred_len")
              #Update description, including params & seed number
              #print(sweep_config)
              sweep_id = wandb.sweep(sweep_config)
              sweep_commands.append(sweep_id)
              # Write YAML file for debugging, with overwrite
              YAML_FILENAME=f"sweep_{data_path_nodot}_{model}_{pred_len}_seed{num_seed}.yaml"
              #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
              with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
                  yaml.dump(sweep_config,f,sort_keys=False)
print("Run the following commands: \n\n")
#print(sweep_commands)
from functools import reduce
# result = reduce(lambda x, y: f"{x} && {y}", sweep_commands)
# print(result)
# print ("\n Done")
agents_array = reduce(lambda x, y: f"{x} {y}", sweep_commands)
sweep_command=f"""
agents=({agents_array})
for agent in "${{agents[@]}}"
do
  wandb agent "{NAMESPACE}/{WANDB_PROJECT}/$agent"
done
"""
print(sweep_command)

#########



###########################
###########################
###########################
###FOR ERM
#TODO maybe split into separate files or funcs. 
# Generating ERM sweeps
# print("Starting sweep generation")
# print("ERM Sweeps, setting constraints to zero")
# CONSTRAINT_PARAMS={
#   'constraint_level': {'value': -1.0},
#   'constraint_type': {'value': 'erm'},
#   'dual_init': {'value': 0.0},
#   'dual_lr': {'value': 0.0},
# }

# sweep_commands = []
# for num_seed in range(1,NUM_SEEDS+1):
#   for data_path in DATASETS:
#     sweep_config = TEMPLATE.copy()
#     sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path}_seed{SEED}"
#     sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} ERM epsilon run {data_path} seed{SEED}."}
#     sweep_config['parameters']['wandb_run'] = {'value': f"AllModels_{data_path}/ERM"}
#     sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
#     sweep_config["parameters"]["model"] = {"values": MODELS}
#     sweep_config["parameters"]["pred_len"] = {"values": PRED_LENGTHS}
#     #data_path replace .csv with ''
#     sweep_config["parameters"]["model_id"] = {"value": f"{data_path.replace('.csv','')}_erm"}

#     # Add the placeholder constraint levels
#     sweep_config["parameters"].update(CONSTRAINT_PARAMS)
#     # drop constraint_levels
#     #sweep_config["parameters"].pop("constraint_level")
#     # Update description, including params & seed number
#     #print(sweep_config)
    
#     sweep_id = wandb.sweep(sweep_config)
#     sweep_commands.append(f"wandb agent {NAMESPACE}/{WANDB_PROJECT}/{sweep_id}")
#     # Write YAML file for debugging, with overwrite
#     YAML_FILENAME=f"sweep_erm_{data_path}_all_models_seed{SEED}.yaml"
#     #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
#     with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
#         yaml.dump(sweep_config,f,sort_keys=False)
# from functools import reduce
# result = reduce(lambda x, y: f"{x} && {y}", sweep_commands)
# print(result)
# print ("\n Done")

###########################
###########################
###########################
###########################
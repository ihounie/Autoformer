"""
Script to run sweeps 2.0. Before, we used YAMLs. Now we use the wandb API on python.
"""
import yaml
import os
import wandb

###### SCRIPT PARAMETERS
WANDB_PROJECT="Autoformer"
#WANDB_PROJECT="Autoformer"
NAMESPACE="alelab"
YAML_DEBUG_LOCATION="../generated_sweeps/"
if not os.path.exists(YAML_DEBUG_LOCATION):
    os.makedirs(YAML_DEBUG_LOCATION)

#SWEEP_NAME_PREFIX="Finaljan_ERM_replicated_noearlystop"
SWEEP_NAME_PREFIX="Finaljan_ConstantConstrained_replicated_noearlystop"
EXPERIMENT_TAG="e17_finaljan_constant_constrained_replicated"
EXPERIMENT_DESCRIPTION='Replicated no ES'

#MODELS = ["Autoformer","Reformer"]
#TODO dev, comment out.
# MODELS = ["Autoformer","Reformer"]
# DATASETS=["weather.csv"]
# PRED_LENGTHS=[96]
#PROD PARAMETERS
MODELS = ["Autoformer","Reformer","Informer","Transformer"]
DATASETS=["weather.csv","electricity.csv","exchange_rate.csv"]
PRED_LENGTHS = [96,192,336,720]
NUM_SEEDS=1 #TODO will have to run 2 more of constrained (finaljan) eventually
#SEED=0 # IF 0 THEN RANDOM SEED
SEED=2021 # The seed used by the literature

# Only used by ERM, will be overwritten in constrained
if len(MODELS)>1:
    MODEL_DICT = {"values": MODELS}
else:
    MODEL_DICT = {"value": MODELS[0]}

DATASET_DEPENDENT={
  "weather.csv":{
    'root_path': {'value': './dataset/weather/'},
    'data_path': {'value': 'weather.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 21},
    'dec_in': {'value': 21},
    'c_out': {'value': 21},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "electricity.csv":{
    'root_path': {'value': './dataset/electricity/'},
    'data_path': {'value': 'electricity.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 321},
    'dec_in': {'value': 321},
    'c_out': {'value': 321},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  },
  "exchange_rate.csv":{
    'root_path': {'value': './dataset/exchange_rate/'},
    'data_path': {'value': 'exchange_rate.csv'},
    'model_id': {'value': 'placeholder'},
    'enc_in': {'value': 8},
    'dec_in': {'value': 8},
    'c_out': {'value': 8},
    'features': {'value': 'M'},
    'data': {'value': 'custom'},
  }
}

# Structure for the constant constraint levels. Generated by a notebook
CONSTRAINT_DATA={'electricity.csv': {'Autoformer': {96: [0.113, 0.117, 0.12],
   192: [0.14, 0.143, 0.154],
   336: [0.155, 0.163, 0.167],
   720: [0.174, 0.177, 0.185]},
  'Informer': {96: [0.146, 0.149, 0.155],
   192: [0.164, 0.168, 0.17],
   336: [0.18, 0.184, 0.189],
   720: [0.206, 0.208, 0.212]},
  'Reformer': {96: [0.15, 0.151, 0.153],
   192: [0.16, 0.16, 0.161],
   336: [0.165, 0.166, 0.167],
   720: [0.176, 0.177, 0.178]},
  'Transformer': {96: [0.107, 0.109, 0.11],
   192: [0.113, 0.115, 0.12],
   336: [0.127, 0.13, 0.134],
   720: [0.137, 0.138, 0.141]}},
 'exchange_rate.csv': {'Autoformer': {96: [0.107, 0.15, 0.214],
   192: [0.232, 0.266, 0.336],
   336: [0.285, 0.379, 0.539],
   720: [0.383, 0.765, 1.024]},
  'Informer': {96: [0.037, 0.038, 0.041],
   192: [0.04, 0.042, 0.046],
   336: [0.046, 0.048, 0.053],
   720: [0.051, 0.055, 0.062]},
  'Reformer': {96: [0.079, 0.108, 0.138],
   192: [0.134, 0.189, 0.267],
   336: [0.209, 0.35, 0.461],
   720: [0.354, 0.603, 0.688]},
  'Transformer': {96: [0.025, 0.028, 0.029],
   192: [0.029, 0.031, 0.035],
   336: [0.037, 0.039, 0.043],
   720: [0.048, 0.049, 0.051]}},
 'weather.csv': {'Autoformer': {96: [0.292, 0.299, 0.332],
   192: [0.383, 0.464, 0.696],
   336: [0.392, 0.661, 0.681],
   720: [0.67, 0.732, 0.759]},
  'Informer': {96: [0.213, 0.217, 0.222],
   192: [0.222, 0.228, 0.234],
   336: [0.232, 0.237, 0.245],
   720: [0.245, 0.249, 0.26]},
  'Reformer': {96: [0.29, 0.303, 0.32],
   192: [0.306, 0.315, 0.327],
   336: [0.309, 0.313, 0.316],
   720: [0.281, 0.282, 0.283]},
  'Transformer': {96: [0.164, 0.167, 0.173],
   192: [0.177, 0.182, 0.187],
   336: [0.194, 0.195, 0.198],
   720: [0.213, 0.215, 0.216]}}}


CONSTRAINT_PARAMS={
  'constraint_level': {'values': []},#will fail if not set later.
  'constraint_type': {'value': 'constant'},
  'dual_init': {'value': 1.0},
  'dual_lr': {'value': 0.01},
}

SWEEP_HEADER={
  "program": "run.py",
  "method": "grid",
  "project": WANDB_PROJECT,
  "entity": NAMESPACE,
  "metric": {
    "name": "mse/test",
    "goal": "minimize"
  },
}

DOCUMENTATION_PARAMS = {
  'wandb_run': {'value': ''}, 
  'wandb_project': {'value': WANDB_PROJECT},
  'experiment_tag': {'value': EXPERIMENT_TAG},
  'des': {'value': EXPERIMENT_DESCRIPTION}, 
}

TEMPLATE={
    **SWEEP_HEADER,
    "parameters": {
        **DOCUMENTATION_PARAMS,
        #**DATASET_DEPENDENT, #will be added later
        "model":MODEL_DICT,
        'pred_len': {'value': 0}, #also should fail if not set earlier
        **CONSTRAINT_PARAMS,
        #Other params that don't change much
        'train_epochs': {'value': 10},
        'is_training': {'value': '1'},
        'seq_len': {'value': 96}, 
        'label_len': {'value': 48},
        'e_layers': {'value': 2},
        'd_layers': {'value': 1},
        'factor': {'value': 3},
        'itr': {'value': 1},
        'seed': {'value': SEED}
    }
}

# Generating epsilon constraint sweeps
# By definition, must run one at a time because the gridsearch is along constraint levels.
# CONSRTTRAINED
print("Starting sweep generation")
sweep_commands = []
for num_seed in range(1,NUM_SEEDS+1):
  for data_path in DATASETS:
    for model in MODELS:
        for pred_len in PRED_LENGTHS:
              sweep_config = TEMPLATE.copy()
              #data_path replace .csv with '', for names.
              data_path_nodot=data_path.replace('.csv','')

              sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path_nodot}_{model}_{pred_len}_seed{num_seed}"
              sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} Constrained constant {data_path} {model} {pred_len} seed{num_seed}."}
              sweep_config['parameters']['wandb_run'] = {'value': f"{data_path_nodot}/Constrained/{model}/{pred_len}-10e"}
              sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
              sweep_config["parameters"]["model"] = {"value": model}
              sweep_config["parameters"]["pred_len"] = {"value": pred_len}
              
              constraint_type_name = CONSTRAINT_PARAMS['constraint_type']['value']
              sweep_config["parameters"]["model_id"] = {"value": f"{model}_{data_path_nodot}_{pred_len}_{constraint_type_name}"}

              # Add the constraint levels
              sweep_config["parameters"].update(CONSTRAINT_PARAMS)
              sweep_config["parameters"]["constraint_level"] = {"values": CONSTRAINT_DATA[data_path][model][pred_len]}
              # Update description, including params & seed number
              #print(sweep_config)
              sweep_id = wandb.sweep(sweep_config)
              sweep_commands.append(f"wandb agent {NAMESPACE}/{WANDB_PROJECT}/{sweep_id}")
              # Write YAML file for debugging, with overwrite
              YAML_FILENAME=f"sweep_{data_path_nodot}_{model}_{pred_len}_seed{num_seed}.yaml"
              #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
              with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
                  yaml.dump(sweep_config,f,sort_keys=False)
print("Run the following commands: \n\n")
#print(sweep_commands)
from functools import reduce
result = reduce(lambda x, y: f"{x} && {y}", sweep_commands)
print(result)
print ("\n Done")

#########



###########################
###########################
###########################
###FOR ERM
#TODO maybe split into separate files or funcs. 
# Generating ERM sweeps
# print("Starting sweep generation")
# print("ERM Sweeps, setting constraints to zero")
# CONSTRAINT_PARAMS={
#   'constraint_level': {'value': -1.0},
#   'constraint_type': {'value': 'erm'},
#   'dual_init': {'value': 0.0},
#   'dual_lr': {'value': 0.0},
# }

# sweep_commands = []
# for num_seed in range(1,NUM_SEEDS+1):
#   for data_path in DATASETS:
#     sweep_config = TEMPLATE.copy()
#     sweep_config['name'] = f"{SWEEP_NAME_PREFIX}_{data_path}_seed{num_seed}"
#     sweep_config['parameters']['des'] = {'value': f"{EXPERIMENT_DESCRIPTION} ERM epsilon run {data_path} seed{num_seed}."}
#     sweep_config['parameters']['wandb_run'] = {'value': f"AllModels_{data_path}/ERM"}
#     sweep_config["parameters"].update(DATASET_DEPENDENT[data_path])
#     sweep_config["parameters"]["model"] = {"values": MODELS}
#     sweep_config["parameters"]["pred_len"] = {"values": PRED_LENGTHS}
#     #data_path replace .csv with ''
#     sweep_config["parameters"]["model_id"] = {"value": f"{data_path.replace('.csv','')}_erm"}

#     # Add the placeholder constraint levels
#     sweep_config["parameters"].update(CONSTRAINT_PARAMS)
#     # drop constraint_levels
#     #sweep_config["parameters"].pop("constraint_level")
#     # Update description, including params & seed number
#     #print(sweep_config)
    
#     sweep_id = wandb.sweep(sweep_config)
#     sweep_commands.append(f"wandb agent {NAMESPACE}/{WANDB_PROJECT}/{sweep_id}")
#     # Write YAML file for debugging, with overwrite
#     YAML_FILENAME=f"sweep_{data_path}_all_models_seed{num_seed}.yaml"
#     #print(f"YAML can be debugged in {YAML_DEBUG_LOCATION+YAML_FILENAME}")
#     with open(YAML_DEBUG_LOCATION+YAML_FILENAME,'w') as f:
#         yaml.dump(sweep_config,f,sort_keys=False)
# print("Run the following commands: ")
# print(sweep_commands)
###########################
###########################
###########################
###########################